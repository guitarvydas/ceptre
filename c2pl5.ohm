C2PL5 {

//--- step 5 ---

top = oneCharOrRexpr+

oneCharOrRexpr =
  | space -- space
  | &"(" rexpr -- rexpr
  | any -- other

rexpr =
  | pattern spaces -- pattern
  | "(" spaces rexpr* ")" spaces -- general
  | verbatim spaces -- verbatim
  | atom spaces -- bottom

nl = "\n"
logicVariable = lvFirst nameRest* spaces
name = nameFirst nameRest* spaces
lvFirst =
  | upper -- upper
  | "_" -- underscore
  | ellipses -- ellipses

nameFirst = lower | "/" | "_"
nameRest = 
  | alnum -- alnum
  | "_" -- underscore
  | "/" -- slash
  | "'" -- squote
  | "’" -- equote
  | ellipses -- ellipses

ellipses = "..."

atom =
  | number
  | string
  | logicVariable
  | operator
  | name

number = digit+

sq = "["
fq = "]"

operator = "+"

verbatim = "«" verbatimInnard* "»"
verbatimInnard =
  | "«" verbatimInnard* "»" -- rec
  | ~"«" ~"»" any -- bottom

string = 
  | frontstring spaces "_" spaces tailstring -- multi
  | sq schar* fq spaces -- simple
schar = 
  | ~sq ~fq any
frontstring =   | sq schar* fq spaces
tailstring =   | sq schar* fq spaces

pattern = 
  | "(" spaces "defstage" spaces stageName namedRule+ ")" -- defstage
  | "(" spaces "rule" spaces matches action+ ")" spaces -- toplevelrule

stageName = string
namedRule = "(" spaces "namedrule" spaces rulename matches action+ ")" spaces
matches = "(" spaces "match" spaces matchVerbatim+ ")" spaces
rulename = string
matchVerbatim = verbatim spaces
action = verbatim spaces


}
