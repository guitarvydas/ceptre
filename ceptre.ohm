Ceptre {

TopLevel = Main+

Main =
  | PredicateDeclaration "." -- predicateDeclaration
  | SimplePredicate "." -- predicateApplication
  | Context "." -- context
  | Rule "." -- rule
  | StageDefinition -- stageDefinition
  
Context = "context" name "=" "{" name+ "}"

StageDefinition = "stage" name "=" "{" NamedRule+ "}" Interactive?
StageReference = "stage" name
NamedRule = name ":" Rule "."
Rule = LHSPredicate+ "-o" Replacement+
comment = "%" (~nl any)* nl
Interactive = "#interactive" name "."
PredicateDeclaration = name formal* ":" resultType
formal = name
resultType = name
LHSPredicate =
  | LHSPredicateTest "*" LHSPredicate -- and
  | LHSPredicateTest -- pred

LHSPredicateTest =
  | "qui" -- quiescent
  | "$" SimplePredicate -- keep
  | SimplePredicate -- pred

SimplePredicate =
  | name Arg+ -- withArgs
  | name -- noArgs

Replacement =
  | "(" ")" -- nothing
  | SimplePredicate "*" Replacement -- and
  | SimplePredicate -- pred

Arg =
  | "(" ")" -- nothing
  | Expr
  
Expr =
  | "(" Expr ")" -- nested
  | Expr Operator Expr -- op
  | SimplePredicate -- pred
  | logicVariable -- lvar
  | value -- value

Operator = "+"

name = nameFirst nameRest*
logicVariable =
  | "_" -- dontcare
  | lVfirst nameRest* -- named
lVfirst = upper
nameFirst = lower
nameRest =
  | alnum -- char
  | "_" -- underscore
  | "/" -- slash
  | "'" -- quote
  | "â€™" -- endquote

value = number | quotedSymbol
number = digit+
quotedSymbol = name

space += comment
nl = "\n"
}
