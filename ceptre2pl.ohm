Ceptre2PROLOG {

top = oneCharOrMacro+

oneCharOrMacro =
  | space -- space
  | tree -- tree
  | any -- other

tree = &"(" treeInnard
treeInnard =
  | pattern -- pattern
  | "(" spaces treeInnard* ")" spaces -- general
  | "(" spaces treeInnard* ")" spaces -- rec
  | verbatim -- verbatim
  | atom spaces -- bottom

pattern =
  | "(" spaces "predicate" spaces name treeInnard* ")" spaces -- predicate
  | "(" spaces "comment" spaces string ")" spaces -- comment
  | "(" spaces "match" spaces clause+ ")" spaces -- match
  | "(" spaces "retract" spaces clause+ ")" spaces -- retract
  | "(" spaces "assert" spaces clause+ ")" spaces -- assert

comment = "%" commentInner* nl
commentInner = ~nl any
space += comment
nl = "\n"+
logicVariable = lvFirst nameRest* spaces
name = nameFirst nameRest* spaces
lvFirst = upper
nameFirst = lower | "/" | "_"
nameRest = 
  | alnum -- alnum
  | "_" -- underscore
  | "/" -- slash
  | "'" -- squote
  | "’" -- equote

atom =
  | number
  | string
  | logicVariable
  | operator
  | name

number = digit+
string = sq schar* fq spaces
schar = 
  | string
  | ~sq ~fq any

sq = "["
fq = "]"

operator = "+"

verbatim = "«" verbatimInnard* "»"
verbatimInnard =
  | "«" verbatimInnard* "»" -- rec
  | ~"«" ~"»" any -- bottom

clause =
  | verbatimAsClause spaces -- verbatim
  | tree spaces -- tree
  
verbatimAsClause = "«" verbatimInnardAsClause* "»"
verbatimInnardAsClause =
  | "«" verbatimInnardAsClause* "»" -- rec
  | ~"«" ~"»" any -- bottom

retractClause = "«" verbatimInnardRetractClause* "»"
verbatimInnardRetractClause =
  | "«" verbatimInnardRetractClause* "»" -- rec
  | ~"«" ~"»" any -- bottom

}
