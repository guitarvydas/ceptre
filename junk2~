max_hp 10. damage sword 4. cost sword 10.

context init_ctx = {init_tok}. stage init = {
i : init_tok * max_hp N
-o health N * treasure z * ndays z * weapon_damage 4.
}

qui * stage init -o stage main * main_screen.

stage main = {
do/rest : main_screen -o rest_screen.
do/adventure : main_screen -o adventure_screen.
do/shop : main_screen -o shop_screen.
do/quit : main_screen -o quit.
#interactive main.

qui * stage main * $rest_screen -o stage rest.
qui * stage main * $shop_screen -o stage shop.
qui * stage main * $adventure_screen -o stage adventure.
qui * stage main * quit -o ().

stage rest = {
recharge : rest_screen
	* health HP * max_hp Max * recharge_hp Recharge 
	* cplus HP Recharge Max N
	* ndays NDAYS
     -o   health N * ndays (NDAYS + 1).
}

qui * stage rest -o stage main * main_screen.

stage shop = {
leave : shop_screen -o main_screen.
buy : treasure T * cost W C * damage_of W D * weapon_damage _
* subtract T C (some T’)
-o treasure T’ * weapon_damage D.
}
#interactive shop.
---

stage adventure = {
init : adventure_screen -o spoils z.
}
qui * stage adventure -o stage fight_init * fight_screen.
% drop_amount M N means a monster of size M can drop N coins drop_amount nat nat : bwd.
drop_amount X X. % for now
stage fight_init = {
init : fight_screen -o gen_monster * fight_in_progress. gen_a_monster : gen_monster * monster_size Size
-o monster Size * monster_hp Size. qui * stage fight_init -o stage fight * choice.
try_fight : pred. fight_in_progress : pred. stage fight_auto = {
fight/hit
: try_fight * $fight_in_progress * monster_hp MHP * $weapon_damage D
* subtract MHP D (some MHP’) -o monster_hp MHP’. win
: fight_in_progress * monster_hp MHP * $weapon_damage D * subtract MHP D none -o win_screen.
fight/miss
: try_fight * $fight_in_progress * $monster Size * health HP
* subtract HP Size (some HP’) -o health HP’. die_from_damages
: health z * fight_in_progress -o die_screen. fight/die
: try_fight * fight_in_progress * monster Size * health HP * subtract HP Size none -o die_screen.
}
choice : pred.
qui * stage fight_auto * $fight_in_progress -o stage fight * choice. qui * stage fight_auto * $win_screen -o stage win.
qui * stage fight_auto * $die_screen -o stage die.
}
qui * stage main * qui * stage main * qui * stage main * qui * stage main *
$rest_screen -o stage rest. $shop_screen -o stage shop. $adventure_screen -o stage adventure. quit -o ().
stage fight = { do_fight : choice do_flee : choice
}
#interactive fight. qui * stage fight * qui * stage fight *
* $fight_in_progress -o try_fight. * fight_in_progress -o flee_screen.
$fight_in_progress -o stage fight_auto. $flee_screen -o stage flee.
The rest and shop stages allow recharging health (at the cost of an increment to the number of days) and upgrading one’s weapon damage in exchange for treasure, respectively:
stage rest = {
recharge : rest_screen
* health HP * max_hp Max * recharge_hp Recharge * cplus HP Recharge Max N
* ndays NDAYS
Choosing flee takes you back to the main screen without any spoils:
stage flee = {
% lose spoils
do/flee : flee_screen * spoils X * monster _ * monster_hp _
-o ().
qui * stage flee -o stage main * main_screen.
Finally, we need stages for winning and dying in combat:
go_home_or_continue : pred. stage win = {
win : win_screen * monster Size * drop_amount Size Drop -o drop Drop.
collect_spoils : drop X * spoils Y * plus X Y Z -o spoils Z * go_home_or_continue.
go_home : go_home_or_continue
* spoils X * treasure Y * plus X Y Z -o treasure Z * main_screen.
-o health N * ndays (NDAYS + 1). qui * stage rest -o stage main * main_screen.
stage shop = {
leave : shop_screen -o main_screen.
buy : treasure T * cost W C * damage_of W D * weapon_damage _
* subtract T C (some T’)
-o treasure T’ * weapon_damage D.
}
#interactive shop.
qui * stage shop * $main_screen -o stage main.
The adventure stages are the most complex part of the code, involving the random generation of a monster and ran- dom spoils are collected upon player victory. Spoils are only added to the treasure bank if the player does not flee from a fight in progress. To do all of this, we need an adven- ture initialization stage (init), a monster generating stage (fight_init), a way of responding to player actions in context (fight_auto), and a choice for the player between fighting and fleeing (fight):
}
}
}
continue : go_home_or_continue -o fight_screen. #interactive win.
}
qui * stage qui * stage
end : pred. stage die =
win * win *
$main_screen -o stage main. $fight_screen -o stage fight_init.
{
quit : die_screen -o end.
restart : die_screen * monster_hp _
* spoils _ * ndays _ * treasure _
* weapon_damage _ -o init_tok. #interactive die.
}
qui * stage die * end -o ().
qui * stage die * $init_tok -o stage init.
The program can then be run with the directive #trace _ init init_ctx.
The development of this example benefited extensively from the ability to specify interactivity modularly, occasion- ally making non-player-directed stages (like fight_auto) interactive to debug them. Additionally, we can test the de- sign by “scripting” certain player strategies. For instance, we could augment the two rules in the fight stage to be deter- ministic, fighting when the monster can’t kill us in one turn and fleeing otherwise:
stage fight = {
do_fight : choice * $fight_in_progress * $monster Size
* $health HP * Size < HP -o try_fight.
do_flee : choice * fight_in_progress * $monster Size
* $health HP * Size >= HP -o flee_screen. }
If we remove interactivity from this stage, then we get automated combat sequences that should never result in the player’s death.
In summary, this case study illustrates the use of stages in Ceptre to program system interactions between multiple computational and human decision procedures in a strategy game setting.
