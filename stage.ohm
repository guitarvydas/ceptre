StageParser {

top = oneCharOrMacro+

oneCharOrMacro =
  | comment -- comment
  | space+ -- space
  | applySyntactic<Stagedefinition> -- defstage
  | any -- other

Stagedefinition = 
  | "stage" name "=" "{" NamedRule+ "}" -- ok
  | "stage" name "=" "{" BlockError "}" -- err

NamedRule = 
  | "(" "namedrule" ruleName Match Retractions Assertions ")" -- ok
  | "(" "namedrule" ruleName NamedRuleError? ")" -- error

Match = "(" "match" Sexpr* ")"
Retractions = "(" "retract" Sexpr* ")"
Assertions = "(" "assert" Sexpr* ")"
ruleName = string

BlockError = BlockErrorInner+
BlockErrorInner = ~"(" ~")" any
NamedRuleError = NamedRuleErrorInner+
NamedRuleErrorInner = ~"(" ~")" any

Sexpr = 
  | "(" Sexpr* ")" -- rec
  | atom -- bottom

comment = "%" commentInner* nl
commentInner = ~nl any
space += comment
nl = "\n"+
name = nameFirst nameRest*
nameFirst = letter
nameRest = 
  | alnum -- alnum
  | "_" -- underscore
  | "/" -- slash
  | "'" -- squote
  | "â€™" -- equote

atom =
  | number
  | string
  | name
  | operator

number = digit+
string = "[" schar* "]"
schar = 
  | string
  | ~"[" ~"]" any

operator = ~alnum ~"(" ~")" ~"=" ~"#" ~"." any
}

